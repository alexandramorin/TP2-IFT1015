#Vennila Sooben() et Alexandra Morin (20236038)
#TP2 - IFT1015
#Mercredi 21 decembre 2022

#Ce programme permet de jouer au jeu demineur. En cliquant sur les tuiles, il faut faire attention de ne pas toucher une mine. 
#Les chiffres dévoilé indique la proximité de la mine (Par exemple: 1 veut dire que la bombe est à coté).

# La grille de 5x7 est stocké ici
global grille

# La position des bombes
global bombe

# ?
global count

# Nombre de Rangée et colonne
global gRangee,gColonne

# Nombre de mines
global nbMine

# ?
global placeBombeListeUnique

# Il faut traiter le premier click différemment
global bPremierClick

# Nombre de case vue
global nbCaseVue


count=0
caseVide=0
caseBombe=100
casevue=200
casepasclic=300
caseDrapeau=400
bPremierClick=True
nbCaseVue = 0

#
# Déclaration de la grille, du placement des bombes et des chiffres.
#
def decla(ran, col):
    global placeBombeListeUnique
    global grille
    
    placeBombeListeUnique=[""]
    grille=[]
    
    #
    # Creation de la matrice en 2D.
    #
    for i in range(1,gRangee+2):
        grille1=[]
        for j in range(1,gColonne+2):
            grille1.append(caseVide)              
        grille.append(grille1)  

# Prend un entier représentant l'index d'une tuile et retourne
# l'identifiant HTML(id) de l'élément représentant cette case dans le DOM
def idCase(colonne,rangee):
    return "tuile" + colRow(rangee,colonne)

# Créer un identifiant pour row+col pour les cases (12: 1 row, 2 columns i.e case representant cela)
def colRow(rangee,colonne):
    return str(rangee)+str(caseVide)+str(colonne)
    
#
# On détecte sur le 'Shift' est appuyé
#
def detecteClickShift(case):
    grille[case]="flag"
    pic=image(case)
    num=idCase(case)
    num=document.querySelector('#main')
    num.innerHTML=pic

#
# La procédure init(largeur, hauteur) démarre la partie de démineur.
# Cette procédure prend deux entiers en paramètres représentant 
# respectivement la largeur de la grille de jeu et la hauteur de la grille.
#
def init(rang,colo):
    global grille
    global gRangee, gColonne
    
    gRangee=rang
    gColonne=colo
    start()
    
    main=document.querySelector('#main')
    main.innerHTML=""
    string=decideRangeeCol(rang,colo)
    main.innerHTML = string

#    
# Prend deux entiers représentant les nombres de rangee et colonne et retourne
# le code HTML pour creer les tuiles
#
def decideRangeeCol(ran,col):
    string='''
  <link rel="preload" href="http://codeboot.org/images/minesweeper/0.png">
  <link rel="preload" href="http://codeboot.org/images/minesweeper/1.png">
  <link rel="preload" href="http://codeboot.org/images/minesweeper/2.png">
  <link rel="preload" href="http://codeboot.org/images/minesweeper/3.png">
  <link rel="preload" href="http://codeboot.org/images/minesweeper/4.png">
  <link rel="preload" href="http://codeboot.org/images/minesweeper/5.png">
  <link rel="preload" href="http://codeboot.org/images/minesweeper/6.png">
  <link rel="preload" href="http://codeboot.org/images/minesweeper/7.png">
  <link rel="preload" href="http://codeboot.org/images/minesweeper/8.png">
  <link rel="preload" href="http://codeboot.org/images/minesweeper/blank.png">
  <link rel="preload" href="http://codeboot.org/images/minesweeper/flag.png">
  <link rel="preload" href="http://codeboot.org/images/minesweeper/mine.png">
  <link rel="preload" href="http://codeboot.org/images/minesweeper/mine-red.png">
  <link rel="preload" href="http://codeboot.org/images/minesweeper/mine-red-x.png">'''
   
    string=string + '''<style>\n
      #main table {\n
        border: 1px solid black;\n
        margin: 10px;\n
      }\n
      #main table td {\n
        width: 30px;\n
        height: 30px;\n
        border: none;\n
      }\n
      </style>\n
      <table>\n'''
    global event

    # On ajoute les 'onclick' pour chaque case.
    for i in range(1,gRangee+1):
        counts=0
        string=string + '<tr>\n'
        for j in range(1,gColonne+1):
            counts=counts+1
            string=string + '<td id="' +idCase(counts,i) + '" onclick="clic('+str(colRow(i,counts))+', event)"><img src="http://codeboot.org/images/minesweeper/blank.png"></td>'+'\n'
        string=string + '</tr>\n'

    string=string + '</table>'
    return string

#
# Détection de la victoire ou non.
#
def victoire():
    global gRangee,gColonne
   
    count=(gRangee*gColonne)-nbMine
    done=False
    coded=False
    for i in range(1,gRangee+1):
        for j in range(1,gColonne+1):
            #il faut que casevide/ flag+bombe = nombre de mines
            if grille[i][j] != caseBombe:
                count=count+1
                coded=True
                break
                
        if coded==True:
            break
        if i==gRangee+1 and j==gRangee+1:
            done=True
    
    if coded==True:
        return False
    elif count==0 :
        change=image("0")
        coded=True
        id="tuile" + str(gRangee)+str(gColonne)
        l=document.querySelector("#" + id)
        l.innerHTML=(change)
        return True
    else:
        return False
    
#
# Placement des bombes de façon aléatoire
#
def placeBombeAleatoire(case):
    global bombe, gRangee,gColonne, nbMine
    global placeBombeListeUnique

    ranAc=math.floor(case/100)
    colAc=case-ranAc*100
    
    chooserowcol=math.floor(random()*3)  
    if chooserowcol==1:
        nbMine=math.floor(random()*(gRangee+1))
    else:
        nbMine=math.floor(random()*(gColonne+1))
    nbMine+=1 #Pour avoir au moins 1 mine
    placeBombeListeUnique=[]
    print( "Nombre de mine", nbMine)
    
    # Vérification si les emplacements des mines sont uniques
    while len(placeBombeListeUnique) != nbMine:
        r=math.floor(random()*gRangee)
        c=math.floor(random()*gColonne)
        l=str(r) + str(c)
        x=int(l)

        # Si la rangée et la colonne sont valides, qu'il n'y pas de bombe et que ce n'est pas 
        # première case que l'utilisateur a sélectionné.
        if r>0 and c>0 and grille[r][c] != caseBombe and r!= ranAc and c!=colAc:
            print(r,c)
            grille[r][c]=caseBombe
            placeBombeListeUnique.append(str(r) + str(caseVide) + str(c))
            # Ceci calcule les chiffres proche des bombes
            if r+1 <= gRangee and grille[r+1][c]!=caseBombe:
                grille[r+1][c]+=1
            if r+1 <= gRangee and c+1 <= gColonne and grille[r+1][c+1]!=caseBombe:
                grille[r+1][c+1]+=1
            if c+1 <= gColonne and grille[r][c+1]!=caseBombe:
                grille[r][c+1]+=1
            if c-1 >= 0 and grille[r][c-1]!=caseBombe:
                grille[r][c-1]+=1
            if r-1 >= 0 and c-1 >= 0 and grille[r-1][c-1]!=caseBombe:
                grille[r-1][c-1]+=1
            if r+1 <= gRangee and c-1 >= 0 and grille[r+1][c-1]!=caseBombe:
                grille[r+1][c-1]+=1
            if r-1 >= 0 and grille[r-1][c]!=caseBombe:
                grille[r-1][c]+=1
            if r-1 >= 0 and c+1 <= gColonne and grille[r-1][c+1]!=caseBombe:
                grille[r-1][c+1]+=1
            print(grille)
    
# Gestionnaire d'évènement d'un clic sur une case.
# Le paramètre case est un entier représentant l'index de la case cliquée
# Cette fonction traite les évènements onclick sur les tuiles de
# la grille. Le nombre et le type des paramètres sont laissés au choix, 
# car cela dépendra de votre choix de représentation de la grille dans 
# votre programme. 
def clic(case, event):
    global grille, bombe, gRangee, gColonne
    global count, coded
    global bPremierClick

    if event.currentTarget == None:
        return
    
    # Ce n'est que lors du premier clic sur une tuile que les mines sont 
    # placées aléatoirement dans la grille afin d'éviter que le premier clic
    # du joueur ne soit sur un mine. 
    if bPremierClick == True:
        bPremierClick = False
        placeBombeAleatoire(case)
     
    # 
    coded=False
    count=count+1
    casestr=str(case)
    id = "tuile" + casestr
    rangee = int(casestr[:1])
    colonne = int(casestr[1:])
    
    if event.shiftKey and grille[rangee][colonne]==caseDrapeau:
        change=image("blank")
        coded=True
        l=document.querySelector("#" + id)
        l.innerHTML=(change)
        
    elif event.shiftKey and (grille[rangee][colonne]==caseVide or grille[rangee][colonne]==caseBombe):
        change=image("flag")
        l=document.querySelector("#" + id)
        l.innerHTML=(change)
    
    elif grille[rangee][colonne]==caseVide:
        pos=recurs(rangee, colonne) 
            
    elif grille[rangee][colonne]==caseBombe:
            devoileBombe(casestr)
            change=image("mine-red")
            l=document.querySelector("#" + id)
            l.innerHTML=(change)
            alert("YOU LOST")
            count=0
    else:
        change=image(str(grille[rangee][colonne]))
        l=document.querySelector("#" + id)
        l.innerHTML=(change)
        
    if victoire()==True:
            devoileBombe(casestr)
            alert("YOU WON")
            count=0

# Cette fonction permet de devoilée les cases vides qui se touche dès qu'une
# case vide est cliqué
def recurs(rang,colonne):
    global nbCaseVue
    
    # Il faut compter le # de case vue pour déterminer si terminé
    nbCaseVue += 1
    
    # Case est maintenant 'vue' et on met à jour la grille
    grille[rang][colonne]=casevue
    change=image("0")
    id= "tuile" + str(rang) +"0" + str(colonne)
    l=document.querySelector("#" + id)
    l.innerHTML=(change)
    
    # Permet de devoiler la cases vide suivante
    if grille[rang][colonne]==caseVide:
        recurs(rang, colonne)
    # Si la case directement en bas est vide,elle est devoilee
    if rang+1<=gRangee and grille[rang+1][colonne]==caseVide:
        recurs(rang+1, colonne)
    # Si la case directement en haut est vide,elle est devoilee
    if rang-1>0-1 and grille[rang-1][colonne]==caseVide:
        recurs(rang-1, colonne)
    # Si la case directement a droite est vide,elle est devoilee
    if colonne+1 <= gColonne and grille[rang][colonne+1]==caseVide:
        recurs(rang, colonne+1)
    # Si la case directement a gauche est vide,elle est devoilee
    if colonne-1>0-1 and grille[rang][colonne-1]==caseVide:
        recurs(rang, colonne-1)
    # Si la case diagonale haute-gauche est vide,elle est devoilee
    if colonne-1>0-1 and rang-1>0-1 and grille[rang-1][colonne-1]==caseVide:
        recurs(rang-1, colonne-1)
    # Si la case diagonale haute-droite est vide,elle est devoilee
    if colonne+1 <= gColonne and rang-1>0-1 and grille[rang-1][colonne+1]==caseVide:
        recurs(rang-1, colonne+1)
    # Si la case diagonale bas-gauche est vide,elle est devoilee
    if colonne-1>0-1 and rang+1<=gRangee and grille[rang+1][colonne-1]==caseVide:
        recurs(rang+1, colonne-1)
    # Si la case diagonale bas-droite est vide,elle est devoilee
    if colonne+1 <= gColonne and rang+1<=gRangee and grille[rang+1][colonne+1]==caseVide:
        recurs(rang+1, colonne+1)
    return nbCaseVue
        
# Devoile les bombes quand c'est terminé
def devoileBombe(casestr):
    global placeBombeListeUnique, bombe, grille, rang,col
    
    # Afficher l'image de toutes les mines
    for i in range(nbMine):
        change=image("mine")
        id= "tuile" + str(placeBombeListeUnique[i])
        l=document.querySelector("#" + id)
        l.innerHTML=(change)
            
    for i in range(1,gRangee+1):
        for j in range(1,gColonne+1):
            p=False
            k=-1
            # Afficher les bombes non détectées
            while (k!=(nbMine-1) and p==False):
                k=k+1
                if (grille[i][j]==caseBombe):
                    change=image("mine-red-x")
                    id= "tuile" + str(i) +"0" + str(j)
                    l=document.querySelector("#" + id)
                    l.innerHTML=(change)
                
                if grille[i][j]==caseDrapeau and (placeBombeListeUnique[k]==str(i)+ "0" +str(j)):
                    p=True
                    change=image("flag")
                    id= "tuile" + str(i) + "0" +str(j)
                    l=document.querySelector("#" + id)
                    l.innerHTML=(change)

# Besoin pour démarrage 
def start():
    global gRangee, gColonne
    
    decla(gRangee,gColonne)
    
# Pour le DOM pour insérer les images des cases.
def image(x):
    return '<img src="http://codeboot.org/images/minesweeper/'+ str(x) +'.png">'

# Tests unitaires.
def testUnitaires():
    if decla(8,8):
        assert recurs(8,8)==64
    if decla(5,8):
        assert recurs(5,8)==40
    if decla(0,0):
        assert recurs(0,0)==0

# Démarrage
init(5,5)
